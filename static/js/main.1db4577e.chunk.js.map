{"version":3,"sources":["components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","id","styleId","onClick","label","color","style","selected","tabs","App","_useState","useState","parseInt","length","_useState2","Object","slicedToArray","tab","setTab","_useState3","_useState4","setTabColor","handleNavClick","map","navTab","Nav_Nav","key","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAGe,SAASA,EAAIC,GAC3B,OACCC,EAAAC,EAAAC,cAAA,OACCC,UAAU,WACVC,GAAIL,EAAMM,QACVC,QAAS,kBAAMP,EAAMO,QAAQP,EAAMQ,MAAOR,EAAMS,QAChDC,MAAOV,EAAMW,SAAW,CAAEF,MAAO,QAAW,IAE3CT,EAAMQ,OCNV,IAAMI,EAAO,CACZ,CAAEJ,MAAO,QAASF,QAAS,YAAaG,MAAO,WAC/C,CAAED,MAAO,SAAUF,QAAS,aAAcG,MAAO,WACjD,CAAED,MAAO,WAAYF,QAAS,YAAaG,MAAO,YAmCpCI,MAhCf,SAAab,GAAO,IAAAc,EACGC,mBAASH,EAAKI,SAASJ,EAAKK,OAAO,IAAIT,OAD1CU,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACZO,EADYH,EAAA,GACPI,EADOJ,EAAA,GAAAK,EAEaR,mBAASH,EAAKI,SAASJ,EAAKK,OAAO,IAAIR,OAFpDe,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEFE,GAFED,EAAA,GAAAA,EAAA,IAIbE,EAAiB,SAAClB,EAAOC,GAC9Ba,EAAOd,GACPiB,EAAYhB,IAGb,OACCR,EAAAC,EAAAC,cAAA,OACCC,UAAU,YAEVH,EAAAC,EAAAC,cAAA,OACCC,UAAU,cAETQ,EAAKe,IAAI,SAACC,GAAD,OACT3B,EAAAC,EAAAC,cAAC0B,EAAD,CACCC,IAAG,OAAAC,OAASH,EAAOpB,OACnBF,QAASsB,EAAOtB,QAChBE,MAAOoB,EAAOpB,MACdC,MAAOmB,EAAOnB,MACdF,QAASmB,EACTf,SAAUU,IAAMO,EAAOpB,WAI1BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WC1BE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1db4577e.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css'\n\nexport default function Nav(props) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"nav-root\"\n\t\t\tid={props.styleId}\n\t\t\tonClick={() => props.onClick(props.label, props.color)}\n\t\t\tstyle={props.selected ? { color: '#fff' } : {}}\n\t\t>\n\t\t\t{props.label}\n\t\t</div>\n\t\t)\n}","import React, { useState } from 'react';\nimport './App.css';\n\nimport Nav from './components/Nav'\n\nconst tabs = [\n\t{ label: 'about', styleId: 'nav-first', color: '#ff652f' },\n\t{ label: 'resume', styleId: 'nav-second', color: '#ffe400' },\n\t{ label: 'projects', styleId: 'nav-third', color: '#14a76c' },\n]\n\nfunction App(props) {\n\tconst [tab, setTab] = useState(tabs[parseInt(tabs.length/2)].label);\n\tconst [tabColor, setTabColor] = useState(tabs[parseInt(tabs.length/2)].color)\n\n\tconst handleNavClick = (label, color) => {\n\t\tsetTab(label);\n\t\tsetTabColor(color);\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"app-root\"\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"nav-header\"\n\t\t\t>\n\t\t\t\t{tabs.map((navTab) => (\n\t\t\t\t\t<Nav\n\t\t\t\t\t\tkey={`nav-${navTab.label}`}\n\t\t\t\t\t\tstyleId={navTab.styleId}\n\t\t\t\t\t\tlabel={navTab.label}\n\t\t\t\t\t\tcolor={navTab.color}\n\t\t\t\t\t\tonClick={handleNavClick}\n\t\t\t\t\t\tselected={tab===navTab.label}\n\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"blob\" />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
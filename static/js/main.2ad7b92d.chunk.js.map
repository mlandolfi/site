{"version":3,"sources":["components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","id","styleId","onClick","label","color","style","selected","borderColor","tabs","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNavClick","state","wrapClass","setState","setTimeout","tab","navTab","renderTab","_this$state","parseInt","length","tabColor","_this2","_this$state2","map","Nav_Nav","key","concat","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAGe,SAASA,EAAIC,GAC3B,OACCC,EAAAC,EAAAC,cAAA,OACCC,UAAU,WACVC,GAAIL,EAAMM,QACVC,QAAS,kBAAMP,EAAMO,QAAQP,EAAMQ,MAAOR,EAAMS,QAChDC,MAAOV,EAAMW,SAAW,CAAEF,MAAOT,EAAMS,MAAOG,YAAaZ,EAAMS,OAAU,IAE1ET,EAAMQ,OCNV,IAAMK,EAAO,CACZ,CAAEL,MAAO,QAASF,QAAS,YAAaG,MAAO,WAC/C,CAAED,MAAO,SAAUF,QAAS,aAAcG,MAAO,WACjD,CAAED,MAAO,WAAYF,QAAS,YAAaG,MAAO,YA4GpCK,cAvGd,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KASPsB,eAAiB,SAACd,EAAOC,GACK,aAAzBM,EAAKQ,MAAMC,YACfT,EAAKU,SAAS,CAAED,UAAW,aAC3BE,WAAW,kBAAMX,EAAKU,SAAS,CAAED,UAAW,UAAWG,IAAKnB,KAAU,KACtEO,EAAKU,SAAS,CAAEG,OAAQpB,MAdNO,EAiBnBc,UAAY,WAAM,IAAAC,EACUf,EAAKQ,MAAxBI,EADSG,EACTH,IAAKH,EADIM,EACJN,UACb,OAAOG,GACN,IAAK,QACJ,OAAO1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWoB,GAAYvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,MAAO,CAAEE,YAAa,UAChF,IAAK,SACJ,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAWoB,GAAYvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,MAAO,CAAEE,YAAa,aAChF,IAAK,WACJ,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAWoB,GAAYvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOM,MAAO,CAAEE,YAAa,aAvBjFG,EAAKQ,MAAQ,CACZK,OAAQf,EAAKkB,SAASlB,EAAKmB,OAAO,IAAIxB,MACtCmB,IAAKd,EAAKkB,SAASlB,EAAKmB,OAAO,IAAIxB,MACnCyB,SAAUpB,EAAKkB,SAASlB,EAAKmB,OAAO,IAAIvB,MACxCe,UAAW,WANMT,wEA6BV,IAAAmB,EAAAhB,KAAAiB,EACgCjB,KAAKK,MAArCK,EADAO,EACAP,OADAO,EACQF,SADRE,EACkBX,UAC1B,OACEvB,EAAAC,EAAAC,cAAA,OACCC,UAAU,YAEVH,EAAAC,EAAAC,cAAA,OACCC,UAAU,cAETS,EAAKuB,IAAI,SAACT,GAAD,OACT1B,EAAAC,EAAAC,cAACkC,EAAD,CACCC,IAAG,OAAAC,OAASZ,EAAInB,OAChBF,QAASqB,EAAIrB,QACbE,MAAOmB,EAAInB,MACXC,MAAOkB,EAAIlB,MACXF,QAAS2B,EAAKZ,eACdX,SAAUiB,IAASD,EAAInB,WAIzBU,KAAKW,oBAnDOW,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2ad7b92d.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css'\n\nexport default function Nav(props) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"nav-root\"\n\t\t\tid={props.styleId}\n\t\t\tonClick={() => props.onClick(props.label, props.color)}\n\t\t\tstyle={props.selected ? { color: props.color, borderColor: props.color } : {}}\n\t\t>\n\t\t\t{props.label}\n\t\t</div>\n\t\t)\n}","import React, { useState } from 'react';\nimport './App.css';\n\nimport Nav from './components/Nav'\n\nconst tabs = [\n\t{ label: 'about', styleId: 'nav-first', color: '#ff652f' },\n\t{ label: 'resume', styleId: 'nav-second', color: '#ffe400' },\n\t{ label: 'projects', styleId: 'nav-third', color: '#14a76c' },\n]\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnavTab: tabs[parseInt(tabs.length/2)].label,\n\t\t\ttab: tabs[parseInt(tabs.length/2)].label,\n\t\t\ttabColor: tabs[parseInt(tabs.length/2)].color,\n\t\t\twrapClass: 'fade-in',\n\t\t}\n\t}\n\n\thandleNavClick = (label, color) => {\n\t\tif (this.state.wrapClass === 'fade-out')\treturn;\n\t\tthis.setState({ wrapClass: 'fade-out' });\n\t\tsetTimeout(() => this.setState({ wrapClass: 'fade-in', tab: label }), 400)\n\t\tthis.setState({ navTab: label })\n\t}\n\n\trenderTab = () => {\n\t\tconst { tab, wrapClass } = this.state;\n\t\tswitch(tab) {\n\t\t\tcase 'about':\n\t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'red' }} /></div>;\n\t\t\tcase 'resume':\n\t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'yellow' }} /></div>;\n\t\t\tcase 'projects':\n\t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'blue' }} /></div>;\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { navTab, tabColor, wrapClass } = this.state;\n\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"app-root\"\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"nav-header\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{tabs.map((tab) => (\n\t\t\t\t\t\t\t<Nav\n\t\t\t\t\t\t\t\tkey={`nav-${tab.label}`}\n\t\t\t\t\t\t\t\tstyleId={tab.styleId}\n\t\t\t\t\t\t\t\tlabel={tab.label}\n\t\t\t\t\t\t\t\tcolor={tab.color}\n\t\t\t\t\t\t\t\tonClick={this.handleNavClick}\n\t\t\t\t\t\t\t\tselected={navTab===tab.label}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.renderTab()}\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\n// function App(props) {\n// \tconst [tab, setTab] = useState(tabs[parseInt(tabs.length/2)].label);\n// \tconst [tabColor, setTabColor] = useState(tabs[parseInt(tabs.length/2)].color)\n// \tconst [wrapClass, setWrapClass] = useState('fade-in')\n\n// \tconst handleNavClick = (label, color) => {\n// \t\tsetTab(label);\n// \t\tsetTabColor(color);\n// \t\t// setWrapClass('fade-out');\n// \t\t// setTimeout(() => setWrapClass('fade-in', 2000))\n// \t\t// setTimeout(() => setTab(label), 2000)\n// \t}\n\n// \tconst renderTab = () => {\n// \t\tconsole.log(tab)\n// \t\tswitch(tab) {\n// \t\t\tcase 'about':\n// \t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'red' }} /></div>;\n// \t\t\tcase 'resume':\n// \t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'yellow' }} /></div>;\n// \t\t\tcase 'projects':\n// \t\t\t\treturn <div className={wrapClass} ><div className=\"blob\" style={{ borderColor: 'blue' }} /></div>;\n// \t\t}\n// \t}\n\n// \treturn (\n// \t\t<div\n// \t\t\tclassName=\"app-root\"\n// \t\t>\n// \t\t\t<div\n// \t\t\t\tclassName=\"nav-header\"\n// \t\t\t>\n// \t\t\t\t{tabs.map((navTab) => (\n// \t\t\t\t\t<Nav\n// \t\t\t\t\t\tkey={`nav-${navTab.label}`}\n// \t\t\t\t\t\tstyleId={navTab.styleId}\n// \t\t\t\t\t\tlabel={navTab.label}\n// \t\t\t\t\t\tcolor={navTab.color}\n// \t\t\t\t\t\tonClick={handleNavClick}\n// \t\t\t\t\t\tselected={tab===navTab.label}\n// \t\t\t\t\t/>\n// \t\t\t\t\t))}\n// \t\t\t</div>\n// \t\t\t{renderTab()}\n// \t\t</div>\n// \t);\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}